require('dotenv').config({ path: '.env.local' });
const fetch = require('node-fetch');

// Konfigurace Strapi API
const STRAPI_URL = process.env.STRAPI_API_URL || 'https://cms.expandmatrix.com';
const STRAPI_TOKEN = process.env.STRAPI_API_TOKEN;

if (!STRAPI_TOKEN) {
  console.error('‚ùå STRAPI_API_TOKEN je vy≈æadov√°n');
  process.exit(1);
}

const KATEGORIE_UID = 'api::kategorie.kategorie';

async function deleteKategorieCollection() {
  console.log('üóëÔ∏è  Spou≈°t√≠m smaz√°n√≠ duplicitn√≠ kolekce Kategorie...');
  console.log(`üéØ UID kolekce: ${KATEGORIE_UID}`);
  console.log('');
  
  try {
    // Nejprve ovƒõ≈ô√≠me, ≈æe kolekce existuje
    console.log('üîç Ovƒõ≈ôuji existenci kolekce...');
    const checkResponse = await fetch(`${STRAPI_URL}/api/content-type-builder/content-types/${KATEGORIE_UID}`, {
      headers: {
        'Authorization': `Bearer ${STRAPI_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!checkResponse.ok) {
      if (checkResponse.status === 404) {
        console.log('‚úÖ Kolekce ji≈æ neexistuje nebo nebyla nalezena');
        return;
      }
      throw new Error(`Chyba p≈ôi ovƒõ≈ôov√°n√≠ kolekce: ${checkResponse.status} ${checkResponse.statusText}`);
    }
    
    const collectionData = await checkResponse.json();
    console.log('üì¶ Kolekce nalezena:');
    console.log(`   N√°zev: ${collectionData.data?.schema?.displayName || 'N/A'}`);
    console.log(`   UID: ${collectionData.data?.uid || 'N/A'}`);
    console.log(`   Typ: ${collectionData.data?.schema?.kind || 'N/A'}`);
    console.log('');
    
    // Smaz√°n√≠ v≈°ech z√°znam≈Ø z kolekce
    console.log('üßπ Ma≈æu v≈°echny z√°znamy z kolekce...');
    const recordsResponse = await fetch(`${STRAPI_URL}/api/kategories`, {
      headers: {
        'Authorization': `Bearer ${STRAPI_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (recordsResponse.ok) {
      const recordsData = await recordsResponse.json();
      const records = recordsData.data || [];
      
      console.log(`üìä Nalezeno ${records.length} z√°znam≈Ø k smaz√°n√≠`);
      
      for (const record of records) {
        try {
          const deleteRecordResponse = await fetch(`${STRAPI_URL}/api/kategories/${record.documentId}`, {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${STRAPI_TOKEN}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (deleteRecordResponse.ok) {
            console.log(`  ‚úÖ Smaz√°n z√°znam: ${record.name} (ID: ${record.id})`);
          } else {
            console.log(`  ‚ùå Chyba p≈ôi maz√°n√≠ z√°znamu ${record.id}: ${deleteRecordResponse.status}`);
          }
        } catch (error) {
          console.log(`  ‚ùå Chyba p≈ôi maz√°n√≠ z√°znamu ${record.id}: ${error.message}`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è  Nelze naƒç√≠st z√°znamy kolekce (mo≈æn√° ji≈æ neexistuj√≠)');
    }
    
    console.log('');
    
    // Smaz√°n√≠ samotn√© kolekce
    console.log('üóëÔ∏è  Ma≈æu definici kolekce...');
    const deleteResponse = await fetch(`${STRAPI_URL}/api/content-type-builder/content-types/${KATEGORIE_UID}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${STRAPI_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (deleteResponse.ok) {
      console.log('‚úÖ Kolekce √∫spƒõ≈°nƒõ smaz√°na');
      
      // Ovƒõ≈ôen√≠ smaz√°n√≠
      console.log('üîç Ovƒõ≈ôuji smaz√°n√≠...');
      const verifyResponse = await fetch(`${STRAPI_URL}/api/kategories`, {
        headers: {
          'Authorization': `Bearer ${STRAPI_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (verifyResponse.status === 404) {
        console.log('‚úÖ Endpoint /api/kategories ji≈æ neexistuje - smaz√°n√≠ potvrzeno');
      } else {
        console.log('‚ö†Ô∏è  Endpoint /api/kategories st√°le existuje - mo≈æn√° je pot≈ôeba restart Strapi');
      }
      
    } else {
      const errorData = await deleteResponse.text();
      throw new Error(`Chyba p≈ôi maz√°n√≠ kolekce: ${deleteResponse.status} ${deleteResponse.statusText}\n${errorData}`);
    }
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi maz√°n√≠ kolekce:', error.message);
    process.exit(1);
  }
}

async function main() {
  console.log('üöÄ Script pro smaz√°n√≠ duplicitn√≠ kolekce Kategorie');
  console.log(`üåê Strapi URL: ${STRAPI_URL}`);
  console.log('');
  
  console.log('‚ö†Ô∏è  VAROV√ÅN√ç: Tento script sma≈æe kolekci "Kategorie" a v≈°echna jej√≠ data!');
  console.log('üìã Ujistƒõte se, ≈æe m√°te z√°lohu dat (backup byl vytvo≈ôen d≈ô√≠ve)');
  console.log('');
  
  await deleteKategorieCollection();
  
  console.log('');
  console.log('‚úÖ Smaz√°n√≠ dokonƒçeno');
  console.log('');
  console.log('üìã DAL≈†√ç KROKY:');
  console.log('  1. Restartujte Strapi server (pokud je pot≈ôeba)');
  console.log('  2. Ovƒõ≈ôte v admin panelu, ≈æe kolekce neexistuje');
  console.log('  3. Pokraƒçujte vytvo≈ôen√≠m nov√© kolekce category_i18n');
}

main().catch(console.error);