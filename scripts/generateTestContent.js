const fetch = require('node-fetch');
require('dotenv').config({ path: '.env.local' });

// N√°hodn√° data pro generov√°n√≠ obsahu
const categories = [
  { name: 'Umƒõl√° inteligence', slug: 'umela-inteligence', description: 'ƒål√°nky o AI technologi√≠ch a jejich aplikac√≠ch' },
  { name: 'Machine Learning', slug: 'machine-learning', description: 'Pokroƒçil√© techniky strojov√©ho uƒçen√≠' },
  { name: 'Automatizace', slug: 'automatizace', description: 'Automatizace proces≈Ø pomoc√≠ AI' },
  { name: 'Data Science', slug: 'data-science', description: 'Anal√Ωza dat a prediktivn√≠ modelov√°n√≠' },
  { name: 'Technologie', slug: 'technologie', description: 'Nejnovƒõj≈°√≠ technologick√© trendy' },
  { name: 'Business AI', slug: 'business-ai', description: 'AI ≈ôe≈°en√≠ pro podnik√°n√≠' }
];

const authors = [
  { name: 'Jan Nov√°k', email: 'jan.novak@expandmatrix.com' },
  { name: 'Marie Svobodov√°', email: 'marie.svobodova@expandmatrix.com' },
  { name: 'Petr Dvo≈ô√°k', email: 'petr.dvorak@expandmatrix.com' },
  { name: 'Anna Kr√°sn√°', email: 'anna.krasna@expandmatrix.com' }
];

const articleTitles = [
  'Jak AI mƒõn√≠ zp≈Øsob pr√°ce v modern√≠ch firm√°ch',
  'Machine Learning: Od z√°klad≈Ø k pokroƒçil√Ωm technik√°m',
  'Automatizace z√°kaznick√©ho servisu pomoc√≠ chatbot≈Ø',
  'Prediktivn√≠ anal√Ωza v e-commerce: Praktick√Ω pr≈Øvodce',
  'Etick√© aspekty umƒõl√© inteligence v roce 2024',
  'Implementace AI v mal√Ωch a st≈ôedn√≠ch podnic√≠ch',
  'Deep Learning pro zpracov√°n√≠ p≈ôirozen√©ho jazyka',
  'Computer Vision: Revoluce v anal√Ωze obrazu',
  'AI v healthcare: Budoucnost medic√≠ny',
  'Optimalizace proces≈Ø pomoc√≠ reinforcement learning',
  'Generativn√≠ AI: Kreativita v rukou stroj≈Ø',
  'Bezpeƒçnost AI syst√©m≈Ø: V√Ωzvy a ≈ôe≈°en√≠',
  'Edge AI: Umƒõl√° inteligence na okraji s√≠tƒõ',
  'Transformace HR proces≈Ø pomoc√≠ AI',
  'AI v marketingu: Personalizace na nov√© √∫rovni'
];

const contentTemplates = [
  `Umƒõl√° inteligence se st√°v√° neodmyslitelnou souƒç√°st√≠ modern√≠ho podnik√°n√≠. V tomto ƒçl√°nku se pod√≠v√°me na konkr√©tn√≠ zp≈Øsoby, jak AI transformuje r≈Øzn√© oblasti.

## Hlavn√≠ oblasti aplikace

AI nach√°z√≠ uplatnƒõn√≠ v mnoha oblastech:
- Automatizace rutinn√≠ch √∫kol≈Ø
- Anal√Ωza velk√Ωch dat
- Prediktivn√≠ modelov√°n√≠
- Personalizace z√°kaznick√© zku≈°enosti

## Praktick√© p≈ô√≠klady

Mnoho spoleƒçnost√≠ ji≈æ √∫spƒõ≈°nƒõ implementovalo AI ≈ôe≈°en√≠. Nap≈ô√≠klad:

### Z√°kaznick√Ω servis
Chatboti a virtu√°ln√≠ asistenti dok√°≈æ√≠ vy≈ôe≈°it a≈æ 80% z√°kladn√≠ch dotaz≈Ø z√°kazn√≠k≈Ø.

### Marketing
AI algoritmy optimalizuj√≠ reklamn√≠ kampanƒõ v re√°ln√©m ƒçase.

## Budouc√≠ trendy

Oƒçek√°v√°me dal≈°√≠ rozvoj v oblastech:
1. Explainable AI
2. Federated Learning
3. AI Ethics

## Z√°vƒõr

Implementace AI nen√≠ jen technologick√° v√Ωzva, ale strategick√© rozhodnut√≠, kter√© m≈Ø≈æe z√°sadnƒõ ovlivnit konkurenceschopnost firmy.`,
  
  `Machine learning p≈ôedstavuje jednu z nejdynamiƒçtƒõji se rozv√≠jej√≠c√≠ch oblast√≠ informatiky. Tento ƒçl√°nek poskytuje komplexn√≠ p≈ôehled z√°kladn√≠ch i pokroƒçil√Ωch technik.

## Z√°kladn√≠ koncepty

### Supervised Learning
Uƒçen√≠ s uƒçitelem vyu≈æ√≠v√° oznaƒçen√° data pro tr√©nov√°n√≠ model≈Ø.

### Unsupervised Learning
Uƒçen√≠ bez uƒçitele hled√° skryt√© vzory v neoznaƒçen√Ωch datech.

### Reinforcement Learning
Posilovan√© uƒçen√≠ se zamƒõ≈ôuje na optimalizaci rozhodov√°n√≠.

## Popul√°rn√≠ algoritmy

- **Random Forest**: Ensemble metoda pro klasifikaci i regresi
- **Neural Networks**: Inspirovan√© biologick√Ωmi neurony
- **SVM**: Support Vector Machines pro klasifikaci
- **K-means**: Clustering algoritmus

## Praktick√© aplikace

Machine learning se pou≈æ√≠v√° v:
- Rozpozn√°v√°n√≠ obrazu
- Zpracov√°n√≠ p≈ôirozen√©ho jazyka
- Doporuƒçovac√≠ch syst√©mech
- Finanƒçn√≠m modelov√°n√≠

## V√Ωzvy a omezen√≠

P≈ôi implementaci ML je t≈ôeba zv√°≈æit:
- Kvalitu a mno≈æstv√≠ dat
- V√Ωpoƒçetn√≠ n√°roƒçnost
- Interpretabilitu model≈Ø
- Etick√© aspekty

## Budoucnost ML

Oƒçek√°v√°me pokroky v:
- AutoML platform√°ch
- Kvantov√©m machine learningu
- Neuromorphic computing`,
  
  `Automatizace pomoc√≠ umƒõl√© inteligence revolucionizuje zp≈Øsob, jak√Ωm firmy p≈ôistupuj√≠ k rutinn√≠m proces≈Øm. Tento ƒçl√°nek zkoum√° mo≈ænosti a v√Ωhody AI automatizace.

## Co je AI automatizace?

AI automatizace kombinuje tradiƒçn√≠ automatizaci s inteligentn√≠mi algoritmy, kter√© dok√°≈æ√≠:
- Rozhodovat na z√°kladƒõ kontextu
- Uƒçit se z dat
- Adaptovat se na zmƒõny

## Kl√≠ƒçov√© oblasti aplikace

### Finanƒçn√≠ procesy
- Automatick√© zpracov√°n√≠ faktur
- Detekce podvod≈Ø
- Compliance monitoring

### HR procesy
- Screening ≈æivotopis≈Ø
- Pl√°nov√°n√≠ smƒõn
- Performance analytics

### V√Ωroba
- Prediktivn√≠ √∫dr≈æba
- Kontrola kvality
- Optimalizace v√Ωroby

## Implementaƒçn√≠ strategie

1. **Identifikace proces≈Ø**: Najdƒõte repetitivn√≠ √∫koly
2. **Anal√Ωza dat**: Ovƒõ≈ôte dostupnost kvalitn√≠ch dat
3. **Pilotn√≠ projekt**: Zaƒçnƒõte s mal√Ωm rozsahem
4. **≈†k√°lov√°n√≠**: Postupnƒõ roz≈°i≈ôujte na dal≈°√≠ oblasti

## ROI a metriky

√öspƒõch AI automatizace mƒõ≈ôte pomoc√≠:
- √öspory ƒçasu
- Sn√≠≈æen√≠ chybovosti
- Zv√Ω≈°en√≠ produktivity
- Spokojenost zamƒõstnanc≈Ø

## V√Ωzvy implementace

- Change management
- ≈†kolen√≠ zamƒõstnanc≈Ø
- Integrace se st√°vaj√≠c√≠mi syst√©my
- Bezpeƒçnost dat`
];

class ContentGenerator {
  constructor() {
    this.createdCategories = [];
    this.createdAuthors = [];
    this.baseURL = process.env.STRAPI_API_URL || 'https://cms.expandmatrix.com';
    this.token = process.env.STRAPI_API_TOKEN;
    
    if (!this.token) {
      throw new Error('STRAPI_API_TOKEN is required in .env.local file');
    }
  }

  getRandomElement(array) {
    return array[Math.floor(Math.random() * array.length)];
  }

  generateSlug(title) {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }

  generateContent() {
    return this.getRandomElement(contentTemplates);
  }

  async createCategories() {
    console.log('üè∑Ô∏è  Vytv√°≈ôen√≠ kategori√≠...');
    
    for (const category of categories) {
      try {
        const response = await fetch(`${this.baseURL}/api/categories`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
          },
          body: JSON.stringify({
            data: {
              name: category.name,
              slug: category.slug,
              description: category.description
            }
          })
        });

        if (response.ok) {
          const result = await response.json();
          this.createdCategories.push(result.data);
          console.log(`‚úÖ Kategorie "${category.name}" vytvo≈ôena`);
        } else {
          const errorText = await response.text();
          console.log(`‚ö†Ô∏è  Kategorie "${category.name}" - ${response.status}: ${errorText}`);
        }
      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi vytv√°≈ôen√≠ kategorie "${category.name}":`, error.message);
      }
    }
  }

  async createAuthors() {
    console.log('üë• Vytv√°≈ôen√≠ autor≈Ø...');
    
    for (const author of authors) {
      try {
        const response = await fetch(`${this.baseURL}/api/authors`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
          },
          body: JSON.stringify({
            data: {
              name: author.name,
              email: author.email
            }
          })
        });

        if (response.ok) {
          const result = await response.json();
          this.createdAuthors.push(result.data);
          console.log(`‚úÖ Autor "${author.name}" vytvo≈ôen`);
        } else {
          const errorText = await response.text();
          console.log(`‚ö†Ô∏è  Autor "${author.name}" - ${response.status}: ${errorText}`);
        }
      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi vytv√°≈ôen√≠ autora "${author.name}":`, error.message);
      }
    }
  }

  async fetchExistingData() {
    try {
      console.log('üìã Naƒç√≠t√°n√≠ existuj√≠c√≠ch dat...');
      
      // Naƒçten√≠ existuj√≠c√≠ch kategori√≠
      const categoriesResponse = await fetch(`${this.baseURL}/api/categories`, {
        headers: {
          'Authorization': `Bearer ${this.token}`
        }
      });
      
      if (categoriesResponse.ok) {
        const categoriesData = await categoriesResponse.json();
        this.createdCategories = categoriesData.data || [];
        console.log(`‚ÑπÔ∏è  Nalezeno ${this.createdCategories.length} existuj√≠c√≠ch kategori√≠`);
      }

      // Naƒçten√≠ existuj√≠c√≠ch autor≈Ø
      const authorsResponse = await fetch(`${this.baseURL}/api/authors`, {
        headers: {
          'Authorization': `Bearer ${this.token}`
        }
      });
      
      if (authorsResponse.ok) {
        const authorsData = await authorsResponse.json();
        this.createdAuthors = authorsData.data || [];
        console.log(`‚ÑπÔ∏è  Nalezeno ${this.createdAuthors.length} existuj√≠c√≠ch autor≈Ø`);
      }
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ existuj√≠c√≠ch dat:', error.message);
    }
  }

  async createArticles(count = 15) {
    console.log(`üìù Vytv√°≈ôen√≠ ${count} ƒçl√°nk≈Ø...`);
    
    if (this.createdCategories.length === 0 || this.createdAuthors.length === 0) {
      console.error('‚ùå Nejprve mus√≠ b√Ωt vytvo≈ôeny kategorie a auto≈ôi');
      return;
    }

    for (let i = 0; i < count; i++) {
      const title = this.getRandomElement(articleTitles);
      const slug = this.generateSlug(title);
      const content = this.generateContent();
      const category = this.getRandomElement(this.createdCategories);
      const author = this.getRandomElement(this.createdAuthors);
      
      // N√°hodn√© datum v posledn√≠ch 30 dnech
      const publishedAt = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString();

      try {
        const response = await fetch(`${this.baseURL}/api/articles`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${this.token}`
          },
          body: JSON.stringify({
            data: {
              title: `${title} ${i + 1}`,
              slug: `${slug}-${i + 1}`,
              description: `ƒål√°nek o ${title.toLowerCase()}`,
              category: category.id || category.documentId,
              author: author.id || author.documentId
            }
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ ƒål√°nek "${title} ${i + 1}" vytvo≈ôen`);
        } else {
          const errorData = await response.text();
          console.error(`‚ùå Chyba p≈ôi vytv√°≈ôen√≠ ƒçl√°nku "${title} ${i + 1}" - ${response.status}:`, errorData);
        }
      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi vytv√°≈ôen√≠ ƒçl√°nku "${title} ${i + 1}":`, error.message);
      }

      // Kr√°tk√° pauza mezi po≈æadavky
      await new Promise(resolve => setTimeout(resolve, 200));
    }
  }

  async generateAllContent() {
    console.log('üöÄ Spou≈°tƒõn√≠ generov√°n√≠ testovac√≠ho obsahu...');
    console.log(`üîó API URL: ${this.baseURL}`);
    
    try {
      // Naƒçten√≠ existuj√≠c√≠ch dat
      await this.fetchExistingData();
      
      // Vytvo≈ôen√≠ kategori√≠ (pokud neexistuj√≠)
      if (this.createdCategories.length < categories.length) {
        await this.createCategories();
      }
      
      // Vytvo≈ôen√≠ autor≈Ø (pokud neexistuj√≠)
      if (this.createdAuthors.length < authors.length) {
        await this.createAuthors();
      }
      
      // Aktualizace dat po vytvo≈ôen√≠
      await this.fetchExistingData();
      
      // Vytvo≈ôen√≠ ƒçl√°nk≈Ø
      await this.createArticles(15);
      
      console.log('üéâ Generov√°n√≠ obsahu dokonƒçeno!');
      console.log(`üìä Vytvo≈ôeno: ${this.createdCategories.length} kategori√≠, ${this.createdAuthors.length} autor≈Ø`);
      
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi generov√°n√≠ obsahu:', error.message);
    }
  }
}

// Spu≈°tƒõn√≠ gener√°toru
if (require.main === module) {
  const generator = new ContentGenerator();
  generator.generateAllContent().catch(console.error);
}

module.exports = ContentGenerator;