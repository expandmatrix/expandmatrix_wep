require('dotenv').config();
const fetch = require('node-fetch');

// Test nov√© implementace naƒç√≠t√°n√≠ kategori√≠
class BlogCategoryTest {
  constructor() {
    this.apiUrl = process.env.STRAPI_API_URL;
    this.token = process.env.STRAPI_API_TOKEN;
  }

  async request(endpoint, options = {}) {
    const response = await fetch(`${this.apiUrl}${endpoint}`, {
      headers: {
        'Authorization': `Bearer ${this.token}`,
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    const data = await response.text();
    
    if (!response.ok) {
      console.log(`‚ùå API Error ${response.status}: ${data}`);
      return null;
    }

    try {
      return JSON.parse(data);
    } catch (e) {
      console.log('‚ùå JSON Parse Error:', e.message);
      return null;
    }
  }

  // Simulace transformCategory funkce ze strapiApi
  transformCategory(category, locale) {
    // Najdeme lokalizaci pro aktu√°ln√≠ jazyk
    const localization = category.category_i_18_ns?.find(i18n => i18n.lang === locale);
    
    // Fallback na angliƒçtinu
    const fallbackLocalization = category.category_i_18_ns?.find(i18n => i18n.lang === 'en');
    
    const finalLocalization = localization || fallbackLocalization;

    return {
      id: category.id,
      name: finalLocalization?.name || category.name_cat,
      slug: finalLocalization?.slug || category.name_cat.toLowerCase().replace(/[^a-z0-9]/g, '-'),
      description: finalLocalization?.description || '',
      color: category.color || '#000000',
      createdAt: category.createdAt,
      updatedAt: category.updatedAt,
    };
  }

  // Simulace getCategories funkce ze strapiApi
  async getCategories(locale = 'cs') {
    try {
      const response = await this.request(
        `/api/categories?filters[is_active][$eq]=true&sort=sort_order:asc&populate=category_i_18_ns`
      );

      if (!response?.data) {
        return [];
      }

      return response.data.map(category => this.transformCategory(category, locale));
    } catch (error) {
      console.error('Error fetching categories:', error);
      return [];
    }
  }

  // Simulace getBlogCategories funkce z blogApi
  async getBlogCategories(locale = 'en') {
    try {
      console.log(`Naƒç√≠t√°m kategorie ze Strapi CMS pro jazyk: ${locale}...`);
      
      const categories = await this.getCategories(locale);
      
      console.log('Strapi kategorie:', categories);
      
      if (!categories || !Array.isArray(categories)) {
        console.warn('Neplatn√° data kategori√≠ ze Strapi');
        return [];
      }

      if (categories.length === 0) {
        console.warn('≈Ω√°dn√© kategorie ze Strapi');
        return [];
      }

      const mappedCategories = categories
        .filter(category => {
          if (!category || !category.slug) {
            console.warn('Neplatn√° kategorie:', category);
            return false;
          }
          return true;
        })
        .map((category) => {
          console.log(`Zpracov√°v√°m kategorii: ${category.slug}`);
          
          return {
            id: category.id.toString(),
            slug: category.slug,
            name: { 
              cs: category.name,
              en: category.name
            },
            description: { 
              cs: category.description || '',
              en: category.description || ''
            },
            order: 1,
            isActive: true,
            icon: undefined
          };
        });

      console.log(`‚úÖ √öspƒõ≈°nƒõ naƒçteno ${mappedCategories.length} kategori√≠`);
      return mappedCategories;
      
    } catch (error) {
      console.error('Chyba p≈ôi naƒç√≠t√°n√≠ kategori√≠ ze Strapi:', error);
      return [];
    }
  }

  async testBlogCategories() {
    console.log('üîç Testov√°n√≠ nov√© implementace getBlogCategories...');
    console.log('=' .repeat(60));

    // Test 1: Naƒçten√≠ kategori√≠ pro ƒçe≈°tinu
    console.log('\nüìã Test 1: Naƒç√≠t√°n√≠ kategori√≠ pro ƒçe≈°tinu');
    try {
      const csCategories = await this.getBlogCategories('cs');
      console.log('‚úÖ ƒåesk√© kategorie √∫spƒõ≈°nƒõ naƒçteny');
      console.log(`   Poƒçet kategori√≠: ${csCategories.length}`);
      
      csCategories.forEach((category, index) => {
        console.log(`   Kategorie ${index + 1}:`);
        console.log(`   - ID: ${category.id}`);
        console.log(`   - Slug: ${category.slug}`);
        console.log(`   - N√°zev (CS): ${category.name.cs}`);
        console.log(`   - N√°zev (EN): ${category.name.en}`);
        console.log(`   - Popis (CS): ${category.description.cs}`);
        console.log(`   - Popis (EN): ${category.description.en}`);
        console.log(`   - Aktivn√≠: ${category.isActive}`);
        console.log(`   - Po≈ôad√≠: ${category.order}`);
        console.log('');
      });
    } catch (error) {
      console.log('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ ƒçesk√Ωch kategori√≠:', error.message);
    }

    // Test 2: Naƒçten√≠ kategori√≠ pro angliƒçtinu
    console.log('\nüìã Test 2: Naƒç√≠t√°n√≠ kategori√≠ pro angliƒçtinu');
    try {
      const enCategories = await this.getBlogCategories('en');
      console.log('‚úÖ Anglick√© kategorie √∫spƒõ≈°nƒõ naƒçteny');
      console.log(`   Poƒçet kategori√≠: ${enCategories.length}`);
      
      enCategories.forEach((category, index) => {
        console.log(`   Kategorie ${index + 1}:`);
        console.log(`   - ID: ${category.id}`);
        console.log(`   - Slug: ${category.slug}`);
        console.log(`   - N√°zev (CS): ${category.name.cs}`);
        console.log(`   - N√°zev (EN): ${category.name.en}`);
        console.log(`   - Popis (CS): ${category.description.cs}`);
        console.log(`   - Popis (EN): ${category.description.en}`);
        console.log(`   - Aktivn√≠: ${category.isActive}`);
        console.log(`   - Po≈ôad√≠: ${category.order}`);
        console.log('');
      });
    } catch (error) {
      console.log('‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ anglick√Ωch kategori√≠:', error.message);
    }

    // Test 3: P≈ô√≠m√© testov√°n√≠ getCategories
    console.log('\nüìã Test 3: P≈ô√≠m√© testov√°n√≠ getCategories');
    try {
      const strapiCategories = await this.getCategories('cs');
      console.log('‚úÖ Strapi kategorie √∫spƒõ≈°nƒõ naƒçteny');
      console.log(`   Poƒçet kategori√≠: ${strapiCategories.length}`);
      
      strapiCategories.forEach((category, index) => {
        console.log(`   Kategorie ${index + 1}:`);
        console.log(`   - ID: ${category.id}`);
        console.log(`   - N√°zev: ${category.name}`);
        console.log(`   - Slug: ${category.slug}`);
        console.log(`   - Popis: ${category.description}`);
        console.log(`   - Barva: ${category.color}`);
        console.log('');
      });
    } catch (error) {
      console.log('‚ùå Chyba p≈ôi p≈ô√≠m√©m testov√°n√≠ getCategories:', error.message);
    }

    // Test 4: Porovn√°n√≠ v√Ωsledk≈Ø
    console.log('\nüìã Test 4: Porovn√°n√≠ v√Ωsledk≈Ø mezi locale');
    try {
      const [csResults, enResults] = await Promise.all([
        this.getBlogCategories('cs'),
        this.getBlogCategories('en')
      ]);
      
      console.log(`‚úÖ Porovn√°n√≠ dokonƒçeno`);
      console.log(`   ƒåesk√© kategorie: ${csResults.length}`);
      console.log(`   Anglick√© kategorie: ${enResults.length}`);
      
      if (csResults.length === enResults.length) {
        console.log('‚úÖ Poƒçet kategori√≠ se shoduje pro oba jazyky');
        
        const csSlugs = csResults.map(c => c.slug).sort();
        const enSlugs = enResults.map(c => c.slug).sort();
        
        const slugsMatch = JSON.stringify(csSlugs) === JSON.stringify(enSlugs);
        console.log(`   Shoda slug≈Ø: ${slugsMatch ? '‚úÖ' : '‚ùå'}`);
        
        if (slugsMatch) {
          console.log('   Kategorie jsou konzistentn√≠ nap≈ô√≠ƒç jazyky');
        } else {
          console.log('   ‚ö†Ô∏è  Kategorie nejsou konzistentn√≠:');
          console.log(`   CS slugs: ${csSlugs.join(', ')}`);
          console.log(`   EN slugs: ${enSlugs.join(', ')}`);
        }
      } else {
        console.log('‚ùå Poƒçet kategori√≠ se neshoduje mezi jazyky');
      }
    } catch (error) {
      console.log('‚ùå Chyba p≈ôi porovn√°n√≠:', error.message);
    }
  }
}

// Spu≈°tƒõn√≠ testu
const tester = new BlogCategoryTest();
tester.testBlogCategories()
  .then(() => {
    console.log('\nüéØ Testov√°n√≠ dokonƒçeno!');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Kritick√° chyba p≈ôi testov√°n√≠:', error);
    process.exit(1);
  });