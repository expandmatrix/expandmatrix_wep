require('dotenv').config({ path: '.env.local' });
const fetch = require('node-fetch');

// Konfigurace Strapi API
const STRAPI_URL = process.env.STRAPI_API_URL || 'https://cms.expandmatrix.com';
const STRAPI_TOKEN = process.env.STRAPI_API_TOKEN;

if (!STRAPI_TOKEN) {
  console.error('‚ùå STRAPI_API_TOKEN je vy≈æadov√°n');
  process.exit(1);
}

async function verifyCollectionUID() {
  console.log('üîç Ovƒõ≈ôuji UID kolekc√≠...');
  
  try {
    // Z√≠sk√°n√≠ informac√≠ o content-types
    const response = await fetch(`${STRAPI_URL}/api/content-type-builder/content-types`, {
      headers: {
        'Authorization': `Bearer ${STRAPI_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      console.log('‚ö†Ô∏è  Content-type-builder endpoint nen√≠ dostupn√Ω, zkou≈°√≠m alternativn√≠ metodu...');
      
      // Alternativn√≠ metoda - testov√°n√≠ endpoint≈Ø
      await testEndpoints();
      return;
    }
    
    const data = await response.json();
    console.log('üìã Nalezen√© content-types:');
    
    // Filtrov√°n√≠ relevantn√≠ch kolekc√≠
    const relevantTypes = data.data?.filter(type => 
      type.uid?.includes('categor') || type.uid?.includes('kategor')
    ) || [];
    
    if (relevantTypes.length > 0) {
      relevantTypes.forEach(type => {
        console.log(`  üì¶ ${type.uid}`);
        console.log(`     N√°zev: ${type.schema?.displayName || 'N/A'}`);
        console.log(`     Kolekce: ${type.schema?.kind || 'N/A'}`);
        console.log(`     Atributy: ${Object.keys(type.schema?.attributes || {}).join(', ')}`);
        console.log('');
      });
    } else {
      console.log('‚ö†Ô∏è  ≈Ω√°dn√© relevantn√≠ content-types nenalezeny');
    }
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ content-types:', error.message);
    console.log('üîÑ Zkou≈°√≠m alternativn√≠ metodu...');
    await testEndpoints();
  }
}

async function testEndpoints() {
  console.log('\nüß™ Testov√°n√≠ API endpoint≈Ø...');
  
  const endpoints = [
    '/api/categories',
    '/api/kategories',
    '/api/category',
    '/api/kategorie'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`${STRAPI_URL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${STRAPI_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log(`  ${endpoint}: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`    üìä Poƒçet z√°znam≈Ø: ${data.data?.length || 0}`);
        
        if (data.data && data.data.length > 0) {
          const firstItem = data.data[0];
          console.log(`    üîë Struktura: ${Object.keys(firstItem).join(', ')}`);
        }
      }
      
    } catch (error) {
      console.log(`  ${endpoint}: ‚ùå Chyba - ${error.message}`);
    }
  }
}

async function main() {
  console.log('üöÄ Spou≈°t√≠m ovƒõ≈ôen√≠ UID kolekc√≠...');
  console.log(`üåê Strapi URL: ${STRAPI_URL}`);
  console.log('');
  
  await verifyCollectionUID();
  
  console.log('\n‚úÖ Ovƒõ≈ôen√≠ dokonƒçeno');
  console.log('');
  console.log('üìã SHRNUT√ç:');
  console.log('  üá¨üáß Anglick√© kategorie: /api/categories');
  console.log('  üá®üáø ƒåesk√© kategorie: /api/kategories');
  console.log('  üéØ P≈ôedpokl√°dan√© UID: api::kategorie.kategorie');
  console.log('');
  console.log('‚ö†Ô∏è  DOPORUƒåEN√ç:');
  console.log('  1. Ovƒõ≈ôte v Strapi admin panelu Content-Type Builder');
  console.log('  2. Zkontrolujte UID v Settings > Content-Types');
  console.log('  3. P≈ôipravte se na smaz√°n√≠ duplicitn√≠ kolekce');
}

main().catch(console.error);